import logo from './cryptosight-logo.png';
import './App.css';
import { Bubble, Doughnut } from 'react-chartjs-2';
import { Line } from 'react-chartjs-2';
import React, { useState, useEffect, useRef } from 'react';
import { Chart, LineElement } from 'chart.js';
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import $, { merge } from 'jquery'
import colorLib from '@kurkle/color';
import { LinearScale, Utils } from 'chart.js'; 
import { ArcElement, Legend, Tooltip, CategoryScale, PointElement, Filler } from 'chart.js';
import { toBePartiallyChecked, toHaveTextContent } from '@testing-library/jest-dom/matchers';
import YourComponent from './animatedlogo';
import ImageWithInfoBox from './ImageWithInfoBox';
import ImageWithInfoBox2 from './ImageWithInfoBox2';
import ImageWithInfoBox3 from './ImageWithInfoBox3';
import ImageWithInfoBox4 from './ImageWithInfoBox4';

Chart.register(ArcElement, Tooltip, Legend, CategoryScale, PointElement, LinearScale, LineElement, Filler);

function AlgorithmPage({ setSelectedAlgorithm }) {
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [selected, setSelected] = useState('Select a strategy');
  const [dropdownHeight, setDropdownHeight] = useState(0);
  const dropdownRef = useRef(null);

  useEffect(() => {
    if (dropdownVisible && dropdownRef.current) {
      setDropdownHeight(dropdownRef.current.getBoundingClientRect().height);
    }
  }, [dropdownVisible]);

  const handleAlgorithmChange = (event) => {
    setSelectedAlgorithm(event.target.textContent);
    setSelected(event.target.textContent);
    setDropdownVisible(false);
  }

  return (
    <div className="container">
      <div className="logo-container">
        <img src={logo} className="logo" alt="Logo" />
      </div>
      <div className="dropdown" onMouseEnter={() => setDropdownVisible(true)} onMouseLeave={() => setDropdownVisible(false)}>
        <button className="algotxt">{selected}</button>
        <div className="dropdown-content" ref={dropdownRef} style={{display: dropdownVisible ? 'block' : 'none'}}>
          <button onClick={handleAlgorithmChange} className="algorithm">Low Risk, Low Reward (LSTM Machine learning Simple Moving Average)</button>
          <button onClick={handleAlgorithmChange} className="algorithm">Moderate Risk, Moderate Reward (Momentum Trading)</button>
          <button onClick={handleAlgorithmChange} className="algorithm">High Risk, High Reward (Dual Thrust Trading)</button>
        </div>
      </div>
      <Link to="/crypto" className="next-link" style={{marginTop: dropdownVisible ? `${dropdownHeight + 20}px` : '50px'}}>Next</Link>
    </div>
  );
}

function CryptoPage({ setSelectedCrypto }) {
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [selected, setSelected] = useState('Select a Crypto');

  const handleCryptoChange = (event) => {
    setSelectedCrypto(event.target.textContent);
    setSelected(`${event.target.textContent} selected`);
    setDropdownVisible(false);
  }

  return (
    <div className="container">
      <div className="logo-container">
        <img src={logo} className="logo" alt="Logo" />
      </div>
      <div className="dropdown" onMouseEnter={() => setDropdownVisible(true)} onMouseLeave={() => setDropdownVisible(false)}>
        <button className="cryptotxt">{selected}</button>
        <div className="dropdown-content" style={{display: dropdownVisible ? 'block' : 'none'}}>
          <button onClick={handleCryptoChange} className="btc">BTCUSD</button>
          <button onClick={handleCryptoChange} className="eth">ETHUSD</button>
          <button onClick={handleCryptoChange} className="tet">USDT</button>
          <button onClick={handleCryptoChange} className="xrp">XRPUSD</button>
          <button onClick={handleCryptoChange} className="bnb">BNBUSD</button>
        </div>
      </div>
      <Link to="/stats" className="next-link" style={{marginTop: dropdownVisible ? '200px' : '70px'}}>Next</Link>
    </div>
  );
}

function StatisticsPage({ selectedAlgorithm, selectedCrypto }) {
  const [responseData, setResponseData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState([]);  // y
  const [labels, setLabels] = useState([]);  // x
  const [CARData, setCARData] = useState();
  const [Winn, setWin] = useState();
  const [Losss, setLoss] = useState();
  const [data2, setData2] = useState([]);

  const [Sharpe, setSharpe] = useState([]);
  const [PSR, setPSR] = useState([]);
  const [Alpha, setAlpha] = useState([]);
  const [Beta, SetBeta] = useState([]);

  const navigate = useNavigate();
  const handleBack = () => {
    navigate(-2);
  }

  useEffect(() => {
      $.ajax({
        url: '/sim',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          selectedAlgorithm: selectedAlgorithm,
          selectedCrypto: selectedCrypto,
        }),
        beforeSend: function () {
          setIsLoading(true);
        },
        success: function (response) {
          setIsLoading(false);
          setResponseData(response.value); // Save the specific data from the response
        },
    })
  
}, [selectedAlgorithm, selectedCrypto]);

useEffect(() => {
  if (responseData && responseData.backtest) {

    const values = responseData.backtest.charts['Strategy Equity'].Series.Equity.Values;
    const newData = [];
    const newLabels = [];

    for (const point of values) {
      if (point.hasOwnProperty('x') && point.hasOwnProperty('y')) {
        newLabels.push(point.x);
        newData.push(point.y);
      }
    }
    setLabels(newLabels)
    setData(newData)

    const xArray = [1672549200,1672635600,1672722000,1672756260,1672760820,1672765380,1672769940,1672774500,1672779060,1672808400,1672842660,1672847220,1672851780,1672856340,1672860900,1672865460,1672894800,1672929060,1672933620,1672938180,1672942740,1672947300,1672951860,1672981200,1673015460,1673020020,1673024580,1673029140,1673033700,1673038260,1673067600,1673154000,1673240400,1673274660,1673279220,1673283780,1673288340,1673292900,1673297460,1673326800,1673361060,1673365620,1673370180,1673374740,1673379300,1673383860,1673413200,1673447460,1673452020,1673456580,1673461140,1673465700,1673470260,1673499600,1673533860,1673538420,1673542980,1673547540,1673552100,1673556660,1673586000,1673620260,1673624820,1673629380,1673633940,1673638500,1673643060,1673672400,1673758800,1673845200,1673931600,1673965860,1673970420,1673974980,1673979540,1673984100,1673988660,1674018000,1674052260,1674056820,1674061380,1674065940,1674070500,1674075060,1674104400,1674138660,1674143220,1674147780,1674152340,1674156900,1674161460,1674190800,1674225060,1674229620,1674234180,1674238740,1674243300,1674247860,1674277200,1674363600,1674450000,1674484260,1674488820,1674493380,1674497940,1674502500,1674507060,1674536400,1674570660,1674575220,1674579780,1674584340,1674588900,1674593460,1674622800,1674657060,1674661620,1674666180,1674670740,1674675300,1674679860,1674709200,1674743460,1674748020,1674752580,1674757140,1674761700,1674766260,1674795600,1674829860,1674834420,1674838980,1674843540,1674848100,1674852660,1674882000,1674968400,1675054800,1675089060,1675093620,1675098180,1675102740,1675107300,1675111860,1675141200,1675175460,1675180020,1675184580,1675189140,1675193700,1675198260,1675227600,1675261860,1675266420,1675270980,1675275540,1675280100,1675284660,1675314000,1675348260,1675352820,1675357380,1675361940,1675366500,1675371060,1675400400,1675434660,1675439220,1675443780,1675448340,1675452900,1675457460,1675486800,1675573200,1675659600,1675693860,1675698420,1675702980,1675707540,1675712100,1675716660,1675746000,1675780260,1675784820,1675789380,1675793940,1675798500,1675803060,1675832400,1675866660,1675871220,1675875780,1675880340,1675884900,1675889460,1675918800,1675953060,1675957620,1675962180,1675966740,1675971300,1675975860,1676005200,1676039460,1676044020,1676048580,1676053140,1676057700,1676062260,1676091600,1676178000,1676264400,1676298660,1676303220,1676307780,1676312340,1676316900,1676321460,1676350800,1676385060,1676389620,1676394180,1676398740,1676403300,1676407860,1676437200,1676471460,1676476020,1676480580,1676485140,1676489700,1676494260,1676523600,1676557860,1676562420,1676566980,1676571540,1676576100,1676580660,1676610000,1676644260,1676648820,1676653380,1676657940,1676662500,1676667060,1676696400,1676782800,1676869200,1676955600,1676989860,1676994420,1676998980,1677003540,1677008100,1677012660,1677042000,1677076260,1677080820,1677085380,1677089940,1677094500,1677099060,1677128400,1677162660,1677167220,1677171780,1677176340,1677180900,1677185460,1677214800,1677249060,1677253620,1677258180,1677262740,1677267300,1677271860,1677301200,1677387600,1677474000,1677508260,1677512820,1677517380,1677521940,1677526500,1677531060,1677560400,1677594660,1677599220,1677603780,1677608340,1677612900,1677617460,1677646800,1677681060,1677685620,1677690180,1677694740,1677699300,1677703860,1677733200,1677767460,1677772020,1677776580,1677781140,1677785700,1677790260,1677819600,1677853860,1677858420,1677862980,1677867540,1677872100,1677876660,1677906000,1677992400,1678078800,1678113060,1678117620,1678122180,1678126740,1678131300,1678135860,1678165200,1678199460,1678204020,1678208580,1678213140,1678217700,1678222260,1678251600,1678285860,1678290420,1678294980,1678299540,1678304100,1678308660,1678338000,1678372260,1678376820,1678381380,1678385940,1678390500,1678395060,1678424400,1678458660,1678463220,1678467780,1678472340,1678476900,1678481460,1678510800,1678597200,1678680000,1678714260,1678718820,1678723380,1678727940,1678732500,1678737060,1678766400,1678800660,1678805220,1678809780,1678814340,1678818900,1678823460,1678852800,1678887060,1678891620,1678896180,1678900740,1678905300,1678909860,1678939200,1678973460,1678978020,1678982580,1678987140,1678991700,1678996260,1679025600,1679059860,1679064420,1679068980,1679073540,1679078100,1679082660,1679112000,1679198400,1679284800,1679319060,1679323620,1679328180,1679332740,1679337300,1679341860,1679371200,1679405460,1679410020,1679414580,1679419140,1679423700,1679428260,1679457600,1679491860,1679496420,1679500980,1679505540,1679510100,1679514660,1679544000,1679578260,1679582820,1679587380,1679591940,1679596500,1679601060,1679630400,1679664660,1679669220,1679673780,1679678340,1679682900,1679687460,1679716800,1679803200,1679889600,1679923860,1679928420,1679932980,1679937540,1679942100,1679946660,1679976000,1680010260,1680014820,1680019380,1680023940,1680028500,1680033060,1680062400,1680096660,1680101220,1680105780,1680110340,1680114900,1680119460,1680148800,1680183060,1680187620,1680192180,1680196740,1680201300,1680205860,1680235200,1680269460,1680274020,1680278580,1680283140,1680287700,1680292260,1680321600,1680408000,1680494400,1680528660,1680533220,1680537780,1680542340,1680546900,1680551460,1680580800,1680615060,1680619620,1680624180,1680628740,1680633300,1680637860,1680667200,1680701460,1680706020,1680710580,1680715140,1680719700,1680724260,1680753600,1680787860,1680792420,1680796980,1680801540,1680806100,1680810660,1680840000,1680926400,1681012800,1681099200,1681133460,1681138020,1681142580,1681147140,1681151700,1681156260,1681185600,1681219860,1681224420,1681228980,1681233540,1681238100,1681242660,1681272000,1681306260,1681310820,1681315380,1681319940,1681324500,1681329060,1681358400,1681392660,1681397220,1681401780,1681406340,1681410900,1681415460,1681444800,1681479060,1681483620,1681488180,1681492740,1681497300,1681501860,1681531200,1681617600,1681704000,1681738260,1681742820,1681747380,1681751940,1681756500,1681761060,1681790400,1681824660,1681829220,1681833780,1681838340,1681842900,1681847460,1681876800,1681911060,1681915620,1681920180,1681924740,1681929300,1681933860,1681963200,1681997460,1682002020,1682006580,1682011140,1682015700,1682020260,1682049600,1682083860,1682088420,1682092980,1682097540,1682102100,1682106660,1682136000,1682222400,1682308800,1682343060,1682347620,1682352180,1682356740,1682361300,1682365860,1682395200,1682429460,1682434020,1682438580,1682443140,1682447700,1682452260,1682481600,1682515860,1682520420,1682524980,1682529540,1682534100,1682538660,1682568000,1682602260,1682606820,1682611380,1682615940,1682620500,1682625060,1682654400,1682688660,1682693220,1682697780,1682702340,1682706900,1682711460,1682740800,1682827200,1682913600,1682947860,1682952420,1682956980,1682961540,1682966100,1682970660,1683000000,1683034260,1683038820,1683043380,1683047940,1683052500,1683057060,1683086400,1683120660,1683125220,1683129780,1683134340,1683138900,1683143460,1683172800,1683207060,1683211620,1683216180,1683220740,1683225300,1683229860,1683259200,1683293460,1683298020,1683302580,1683307140,1683311700,1683316260,1683345600,1683432000,1683518400,1683552660,1683557220,1683561780,1683566340,1683570900,1683575460,1683604800,1683639060,1683643620,1683648180,1683652740,1683657300,1683661860,1683691200,1683725460,1683730020,1683734580,1683739140,1683743700,1683748260,1683777600,1683811860,1683816420,1683820980,1683825540,1683830100,1683834660,1683864000,1683898260,1683902820,1683907380,1683911940,1683916500,1683921060,1683950400,1684036800,1684123200,1684157460,1684162020,1684166580,1684171140,1684175700,1684180260,1684209600,1684243860,1684248420,1684252980,1684257540,1684262100,1684266660,1684296000,1684330260,1684334820,1684339380,1684343940,1684348500,1684353060,1684382400,1684416660,1684421220,1684425780,1684430340,1684434900,1684439460,1684468800,1684503060,1684507620,1684512180,1684516740,1684521300,1684525860,1684555200,1684641600,1684728000,1684762260,1684766820,1684771380,1684775940,1684780500,1684785060,1684814400,1684848660,1684853220,1684857780,1684862340,1684866900,1684871460,1684900800,1684935060,1684939620,1684944180,1684948740,1684953300,1684957860,1684987200,1685021460,1685026020,1685030580,1685035140,1685039700,1685044260,1685073600,1685107860,1685112420,1685116980,1685121540,1685126100,1685130660,1685160000,1685246400,1685332800,1685419200,1685453460,1685458020,1685462580,1685467140,1685471700,1685476260,1685505600,1685539860,1685544420,1685548980,1685553540,1685558100,1685562660,1685592000,1685626260,1685630820,1685635380,1685639940,1685644500,1685649060,1685678400,1685712660,1685717220,1685721780,1685726340,1685730900,1685735460,1685764800,1685851200,1685937600,1685971860,1685976420,1685980980,1685985540,1685990100,1685994660,1686024000,1686058260,1686062820,1686067380,1686071940,1686076500,1686081060,1686110400,1686144660,1686149220,1686153780,1686158340,1686162900,1686167460,1686196800,1686231060,1686235620,1686240180,1686244740,1686249300,1686253860,1686283200,1686317460,1686322020,1686326580,1686331140,1686335700,1686340260,1686369600,1686456000,1686542400,1686576660,1686581220,1686585780,1686590340,1686594900,1686599460,1686628800,1686663060,1686667620,1686672180,1686676740,1686681300,1686685860,1686715200,1686749460,1686754020,1686758580,1686763140,1686767700,1686772260,1686801600,1686835860,1686840420,1686844980,1686849540,1686854100,1686858660,1686888000,1686922260,1686926820,1686931380,1686935940,1686940500,1686945060,1686974400,1687060800,1687147200,1687233600,1687267860,1687272420,1687276980,1687281540,1687286100,1687290660,1687320000,1687354260,1687358820,1687363380,1687367940,1687372500,1687377060,1687406400,1687440660,1687445220,1687449780,1687454340,1687458900,1687463460,1687492800,1687527060,1687531620,1687536180,1687540740,1687545300,1687549860,1687579200,1687665600,1687752000,1687786260,1687790820,1687795380,1687799940,1687804500,1687809060,1687838400,1687872660,1687877220,1687881780,1687886340,1687890900,1687895460,1687924800,1687959060,1687963620,1687968180,1687972740,1687977300,1687981860,1688011200,1688045460,1688050020,1688054580,1688059140,1688063700,1688068260,1688097600,1688131860,1688136420,1688140980,1688145540,1688150100,1688154660,1688184000,1688270400,1688356800,1688391060,1688395620,1688400180,1688443200,1688529600,1688563860,1688568420,1688572980,1688577540,1688582100,1688586660,1688616000,1688650260,1688654820,1688659380,1688663940,1688668500,1688673060,1688702400,1688736660,1688741220,1688745780,1688750340,1688754900,1688759460,1688788800,1688875200,1688961600,1688995860,1689000420,1689004980,1689009540,1689014100,1689018660,1689048000,1689082260,1689086820,1689091380,1689095940,1689100500,1689105060,1689134400,1689168660,1689173220,1689177780,1689182340,1689186900,1689191460,1689220800,1689255060,1689259620,1689264180,1689268740,1689273300,1689277860,1689307200,1689341460,1689346020,1689350580,1689355140,1689359700,1689364260,1689393600,1689480000,1689566400,1689600660,1689605220,1689609780,1689614340,1689618900,1689623460,1689652800,1689687060,1689691620,1689696180,1689700740,1689705300,1689709860,1689739200,1689773460,1689778020,1689782580,1689787140,1689791700,1689796260,1689825600,1689859860,1689864420,1689868980,1689873540,1689878100,1689882660,1689912000,1689946260,1689950820,1689955380,1689959940,1689964500,1689969060,1689998400,1690084800,1690171200,1690205460,1690210020,1690214580,1690219140,1690223700,1690228260,1690257600,1690291860,1690296420,1690300980,1690305540,1690310100,1690314660,1690344000,1690378260,1690382820,1690387380,1690391940,1690396500,1690401060,1690430400,1690464660,1690469220,1690473780,1690478340,1690482900,1690487460,1690516800,1690551060,1690555620,1690560180,1690564740,1690569300,1690573860,1690574400]


    const yArray = [100000,100000,100000,99998.695,99358.8536,98628.3465,98542.8616,98493.6431,99149.0271,99141.2558,99672.5572,99648.9841,100327.6823,100205.9311,99424.9101,99506.5093,99902.8483,99364.0345,99058.3613,98851.1253,98719.0123,99022.095,98682.746,98768.2309,99511.6902,100110.0844,100573.7751,100436.4812,100988.2472,101032.2849,101021.9231,101021.9231,101021.9231,101597.0032,102301.6058,102311.9676,102011.4753,101602.1841,101086.6844,100964.9332,100869.0865,100669.6218,100894.991,101174.7597,101519.2896,101542.6037,101669.5358,102173.3785,102138.4074,102291.244,102400.0429,102578.784,102744.5729,102949.2185,103262.6631,102811.9246,103182.3591,103638.2784,103454.3564,103218.6254,103322.2434,102578.784,103203.0827,103078.741,103179.7686,103485.4418,103682.3161,103721.1729,103721.1729,103721.1729,103721.1729,103778.1628,103661.5925,103703.0397,103675.84,103651.2307,103459.5373,103532.0699,103943.9516,103482.8514,102770.4774,102195.3973,102511.4323,102015.361,101905.2668,101446.757,101060.7798,101107.408,101304.2822,101721.3448,101366.453,101166.9883,101426.0334,101656.5835,102036.0846,102021.8371,102586.5554,102933.6758,103042.4747,103042.4747,103042.4747,103127.9596,104029.4365,104441.3182,104568.2503,104300.1386,104244.4439,104272.9389,103682.3161,104026.8461,103964.6752,104228.9012,104262.5771,104087.7216,104161.5495,102977.7135,102690.1734,103374.0524,103634.3928,103811.8386,103978.9227,104200.4063,105009.9221,104576.0216,104666.6874,104617.4688,104967.1797,105184.7776,105340.2046,105091.5213,105290.9861,105604.4306,105635.516,105910.1038,105783.1717,105581.1166,105581.1166,105581.1166,104964.5893,104658.9161,104959.4084,104881.6948,104504.7842,104428.3659,104262.5771,104474.994,104863.5617,104803.9813,105043.598,105222.3391,105487.8603,105788.3526,105477.4985,105415.3277,105265.0816,105223.6343,105018.9887,106860.7993,106907.4274,107972.1027,108396.9366,108280.3663,108386.5748,107952.6743,108184.5197,108456.517,107244.186,108295.909,108049.8162,107578.3542,107283.0428,107201.4436,107308.9473,107308.9473,107308.9473,106775.3144,106495.5457,106565.4879,106710.5531,106737.7529,106652.268,106656.1537,106399.699,106451.508,106801.2189,107163.882,107529.1356,108187.1101,108044.6353,107544.6783,107435.8794,106998.0932,107233.8242,107021.4072,106938.5128,106868.5706,107785.5902,107422.9271,107143.1584,106663.925,106262.4051,106125.1112,105946.3701,105822.0285,105884.1993,105695.0964,106021.4932,105915.2847,106182.1012,106192.463,106192.463,106192.463,106331.0521,106946.2842,107210.5101,107246.7764,107070.6258,107251.9573,107433.2889,106772.7239,106710.5531,106619.8873,107464.3743,107534.3165,107544.6783,107384.0703,106814.1712,106860.7993,107244.186,107215.691,107536.9069,107591.3064,107731.1908,106505.9075,107008.455,107070.6258,107148.3393,107386.6608,106381.5659,106254.6338,105689.9155,105521.5362,105449.0036,105493.0412,105772.8099,105910.1038,105990.4078,105990.4078,105990.4078,105990.4078,105029.3505,104604.5166,104234.0821,104213.3585,104037.2079,103987.9893,103874.0095,104025.5508,103705.6302,103879.1904,104231.4917,103760.0296,103459.5373,103731.5347,104487.9463,104125.2832,103231.5776,103410.3188,104208.1776,104316.9765,104280.7102,102956.9899,102690.1734,103034.7034,102687.583,102963.466,102858.5527,103171.9973,103171.9973,103171.9973,104042.3888,103863.6477,103621.4405,103861.0572,103762.6201,103409.0235,103521.7081,103371.462,103353.3288,103493.2132,103798.8864,103635.688,103267.844,103140.9119,102874.0954,103045.0652,102997.1418,102920.7235,102572.3079,102754.9347,102747.1633,102286.0631,102475.166,102560.6509,102620.2312,103288.5676,103530.7747,103542.4317,103915.4567,104407.6423,104620.0593,104841.5428,105075.9786,105091.5213,105195.1394,105195.1394,105195.1394,105404.9659,105974.8651,105873.8375,105575.9357,105373.8805,105342.7951,105267.672,105213.2725,104519.0317,104127.8736,103998.3511,103640.8689,103684.9065,103661.5925,103798.8864,103811.8386,103925.8185,103366.2811,103498.3941,103772.9819,103829.9718,104032.027,104314.3861,103671.9543,103407.7283,102561.9461,102207.0543,101923.4,101633.2695,101164.3979,101521.8801,100765.4684,100516.7852,100281.0541,100459.7952,100459.7952,100459.7952,99459.8812,100521.9661,101223.9782,100599.6796,101301.6918,100462.3857,100317.3205,101677.3071,102192.8069,102190.2164,101402.7194,101438.9857,101615.1363,101967.4376,100527.147,100257.7401,100501.2425,100444.2525,101181.2358,100786.1921,101332.7772,100669.6218,101330.1867,102475.166,102708.3066,102516.6132,103045.0652,103102.0551,102851.4341,101845.1031,101871.1065,102081.7339,101764.4926,101858.1048,101902.3105,101902.3105,101902.3105,102216.9515,102453.5823,102547.1945,102822.8304,102590.1001,102952.8473,102877.4375,103883.7685,103687.443,103433.91,103673.1411,103764.153,104230.9137,104221.8125,104136.0014,104388.2342,104176.3066,103959.1783,104388.2342,103257.0869,102453.5823,103366.3012,103896.7702,103985.1817,103410.5069,102643.407,103121.8693,102729.2182,102313.164,102235.1539,102874.8372,102672.0108,103136.1712,103205.0802,103400.1056,103400.1056,103400.1056,104018.9861,103665.3401,103452.1123,103548.3249,103883.7685,103605.5323,103592.5306,103335.0971,103194.6788,103493.7177,103173.8761,102955.4477,103275.2893,103361.1005,104414.2376,104221.8125,104492.2477,104578.0589,104481.8464,104866.6965,104856.2951,105506.3798,105511.5805,105250.2464,105163.1351,105378.9632,105436.1706,105467.3747,105784.616,106101.8573,106390.4949,106374.8929,106400.8963,106632.3264,106946.9674,106946.9674,106946.9674,106829.9521,107128.9911,106978.1714,107001.5745,107067.8831,107347.4195,107352.6202,107482.6371,107093.8865,106668.7311,106835.1528,106546.5152,106612.8238,106759.743,106611.5237,106265.6786,106312.4847,106283.881,106417.7985,106473.7057,106481.5067,106263.0783,106211.0715,106705.1359,106845.5541,106941.7667,106826.0516,106894.9606,106894.9606,106894.9606,106894.9606,106224.0732,106343.6888,106292.9822,106775.345,106777.9453,106871.5575,107004.1748,107076.9843,106849.4547,107154.9944,107165.3958,107347.4195,107030.1782,107032.7785,107500.8395,107147.1934,107248.6066,107399.4263,106887.1596,106490.6079,106598.522,106894.9606,107173.1968,107404.6269,107635.797,107906.4923,107950.698,108007.9055,107901.2916,107715.3674,107573.6489,107474.8361,107638.6574,107711.4669,107745.2713,107745.2713,107745.2713,107721.8682,107693.2645,107552.8462,107625.6557,107584.0503,108009.2057,108130.1214,108455.1637,108049.5109,108010.5058,108088.516,108228.9343,108184.7285,108200.3305,107775.1752,107932.4957,108089.8162,108169.1265,108221.1332,108100.2175,108182.1282,107464.4347,107766.074,107664.6608,108015.7065,107616.5545,107312.3149,107594.4517,107568.4483,107260.3081,107532.0435,107487.8378,107649.0588,107589.251,107677.6625,107677.6625,107677.6625,107737.4703,107563.2476,107412.428,107503.4398,107594.4517,107703.6659,107789.477,107313.6151,106983.3721,106845.5541,106442.5017,106348.8895,106177.2671,106086.2553,106312.4847,106049.8505,106476.3061,106177.2671,105787.2164,105553.1859,105638.9971,106276.08,106673.9318,106987.2726,107080.8848,107625.6557,107781.676,107732.2696,107602.2527,108175.6273,108319.9461,108491.5685,108340.7488,108422.6595,108647.5888,108647.5888,108647.5888,108577.3796,108858.2162,108814.0104,108959.6294,108580.24,108600.7827,108538.3746,108257.538,107006.7751,106741.5406,107097.787,107148.4936,107305.8141,107324.0164,107513.8412,107261.6083,107493.0385,107677.6625,107571.0486,106681.7328,106590.721,106305.9839,105935.4357,105592.191,106218.8726,105834.0224,105808.0191,105839.2231,106775.345,107418.9288,107363.0215,107412.428,107780.3759,107789.7371,107789.477,107789.477,107789.477,107857.0858,107680.2628,107819.3809,107755.6726,107862.2865,107833.6828,107818.0808,107355.2205,107519.0418,107350.0198,107463.1346,107552.8462,107443.632,107347.4195,108149.6239,107321.4161,107425.4296,107186.1985,107459.234,107868.7874,107846.6845,107563.2476,107304.5139,107456.6337,107560.6473,107529.4432,107565.8479,107659.4601,107976.7014,107509.9407,107425.4296,107030.1782,107014.5762,107366.922,107519.0418,107519.0418,107519.0418,107638.6574,107532.0435,107555.4466,107955.8987,107716.6676,107789.477,107888.2899,107599.6523,107500.8395,107565.8479,107573.6489,107441.0317,107235.6049,107170.5965,107695.8649,107571.0486,107776.4754,108343.3492,108366.7522,108496.7691,108465.5651,108384.9546,108910.223,108920.6243,108866.0172,108860.8165,109539.5049,109505.7005,109729.3296,109748.8322,109279.471,109440.692,109157.2551,109318.4761,109347.0798,109347.0798,109347.0798,109399.0866,109300.2738,109553.8068,109391.2856,109625.3161,109345.7797,109391.2856,108899.8216,109081.8453,109118.2501,108892.0206,108304.3441,108314.7454,108169.1265,107669.8615,107391.6252,107299.3132,107199.2002,107235.6049,107339.6185,107389.0249,108114.5194,108109.3187,107980.6019,108241.936,108286.1417,108429.1603,108314.7454,108522.7725,109513.5015,109492.6988,109536.9046,109690.3245,109703.3262,109711.1272,109711.1272,109711.1272,109711.1272,110309.2051,109867.1476,109867.1476,109755.333,109794.3381,109729.3296,109752.7327,109300.2738,108869.9177,108925.825,108988.2331,109250.8673,109279.471,109146.8538,109148.1539,109620.1154,110069.974,110142.7834,110197.3906,110043.9706,110179.1882,111016.4972,111401.3473,111593.7724,111780.9967,111805.7,111799.1991,111765.3947,111765.3947,111765.3947,111874.6089,111963.0204,111976.0221,112067.034,111422.15,111662.6813,111552.1669,111375.3439,111817.4015,111835.6039,111663.9815,111624.9764,111846.0052,111793.9984,111957.8198,111676.9832,111562.5683,111429.951,111424.7504,111489.7588,111409.1483,111428.6509,111727.6898,111749.7927,111976.0221,112021.5281,112122.9413,112080.0357,112290.6631,112659.9112,112100.8384,112262.0594,112386.8756,112254.2584,112280.2617,112280.2617,112280.2617,112506.4912,112467.4861,112597.503,112672.9129,112784.7274,113194.2807,113294.3938,113710.448,113876.8696,113824.8629,114071.895,113783.2574,113963.981,114038.0906,114038.0906,114372.2341,114412.5394,114191.5106,113479.0178,113718.249,114173.3082,114022.4886,114706.3776,115114.6308,114971.6122,115463.0761,115772.5164,115582.6917,116028.5769,115624.0269,115633.9449,115774.1019,115473.9519,115235.1369,115190.7669,115190.7669,115190.7669,115190.7669,114632.2269,114272.0469,114334.6869,114773.1669,114744.4569,114780.9969,114595.6869,114184.6119,113984.9469,114125.8869,114119.3619,114506.9469,114191.1369,114011.0469,113710.8969,113825.7369,114084.1269,113971.8969,114256.3869,114319.0269,114420.8169,113499.4869,113794.4169,113776.1469,113974.5069,113761.7919,113549.0769,113559.5169,113559.5169,113559.5169,113483.8269,113542.5519,113507.3169,113345.4969,113379.4269,113173.2369,113097.5469,113405.5269,113499.4869,113840.0919,114118.0569,114423.4269,114349.0419,114332.0769,114044.9769,114329.4669,114426.0369,114091.9569,114258.9969,114165.0369,114389.4969,114240.7269,114292.9269,114780.9969,114697.4769,114585.2469,114774.4719,114838.4169,115631.8569,116007.6969,115992.0369,116242.5969,116365.2669,116365.2669,116187.7869,116187.7869,116187.7869,116039.0169,116164.2969,116279.1369,116346.9969,116346.9969,115903.2969,116213.8869,116155.1619,116146.0269,116080.7769,116260.8669,116148.6369,115188.1569,114647.8869,114895.8369,115165.9719,115229.9169,115271.6769,115242.9669,114974.1369,115240.3569,115454.3769,115976.3769,115704.9369,115019.8119,114953.2569,114953.2569,114953.2569,115005.4569,115023.7269,114728.7969,115041.9969,115117.6869,115052.4369,115242.9669,115423.0569,115475.2569,115762.3569,115537.8969,115480.4769,116046.8469,115973.7669,116960.3469,117216.1269,116670.6369,116918.5869,117067.3569,116840.2869,116902.9269,117281.3769,117477.1269,117558.0369,117577.6119,117680.7069,117899.9469,117826.8669,118043.4969,117871.2369,118056.5469,117845.1369,117819.0369,117670.2669,117753.7869,117753.7869,117753.7869,117821.6469,117920.8269,118090.4769,118083.9519,118176.6069,118223.5869,118160.9469,117970.4169,118500.2469,118742.9769,118784.7369,119006.5869,119097.9369,119035.2969,119349.8019,119501.1819,119520.7569,119280.6369,119279.3319,119382.4269,119298.9069,119074.4469,118876.0869,119048.3469,118804.3119,118586.3769,118547.2269,118510.6869,118868.2569,118774.2969,118823.8869,118899.5769,118795.1769,118596.8169,118510.6869,118510.6869,118510.6869,118930.8969,118977.8769,119121.4269,119037.9069,119084.8869,118936.1169,119037.9069,118968.7419,119178.8469,119332.8369,119497.2669,119661.6969,119405.9169,119361.5469,119217.9969,119090.1069,119223.2169,119087.4969,119142.3069,119178.8469,119379.8169,120222.8469,120136.7169,119896.5969,119852.2269,118913.9319,118549.8369,118591.5969,118591.5969,118591.5969,118591.5969,118591.5969,118591.5969,118591.5969,118591.5969]

    let mergedYvalues = []
    for(let i = 0; i < newData.length; i++) {
      const index = xArray.indexOf(newLabels[i])  
      if(index !== -1) {
        mergedYvalues.push(yArray[index])
      } else {
        mergedYvalues.push(null)
      }
    }
    setData2(mergedYvalues)

    let Sharpe = [];
    let PSR = [];
    let Alpha = [];
    let Beta = [];
    const findData = (obj) => {
      for(const key in obj) {
        if(typeof obj[key] === 'object') {
          findData(obj[key])
        } else if(key === 'SharpeRatio' && obj[key] !== 0) {
          Sharpe.push(obj[key])
        } else if(key === 'ProbabilisticSharpeRatio' && obj[key] !== 0) {
          PSR.push(obj[key])
        } else if(key === 'Alpha' && obj[key] !== 0) {
          Alpha.push(obj[key])
        } else if(key === 'Beta' && obj[key] !== 0) {
          Beta.push(obj[key])
        }
      }
    }
    findData(responseData.backtest)

    setSharpe(Sharpe)
    setPSR(PSR)
    setAlpha(Alpha)
    SetBeta(Beta)
  }

}, [responseData]);
let CARs = []
const findCAR = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findCAR(obj[key]); // Continue exploring nested objects
    } else if (key === 'CompoundingAnnualReturn' && obj[key] !== 0) {
      CARs.push(obj[key]); // Save the value if the key matches
    }
  }
  return CARs[CARs.length - 1]
};
let Win = []
const findWin = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findWin(obj[key]); // Continue exploring nested objects
    } else if (key === 'NumberOfWinningTrades' && obj[key] !== 0) {
      Win.push(obj[key]); // Save the value if the key matches
    }
  }
  return Win[Win.length - 1]
};
let Loss = []
const findLoss = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findLoss(obj[key]); // Continue exploring nested objects
    } else if (key === 'NumberOfLosingTrades' && obj[key] !== 0) {
      Loss.push(obj[key]); // Save the value if the key matches
    }
  }
  return Loss[Loss.length - 1]
};

const centerLabelPlugin= {
  id: 'center-label',
  beforeDraw: (chart) => {
    const width = chart.width;
    const height = chart.height;
    const ctx = chart.ctx;

    ctx.restore();
    const fontSize = 3;
    ctx.font = fontSize + 'em Poppins';
    ctx.textBaseline = 'middle';

    let text = 0;

    if(responseData && responseData.backtest) {
        text = findCAR(responseData.backtest);
        setCARData(text)
        text = Math.round(text * 100)

    }
    const textX = Math.round((width - ctx.measureText(text).width) / 2)- 15;
    const textY = height / 2 + 10;
    ctx.fillStyle = 'black';
    ctx.fillText(text, textX, textY);
    ctx.fillStyle = '#545456';
    ctx.fillText('%', textX + ctx.measureText(text).width, textY);
    
    ctx.save();
  },
};




const greenGradient = document.createElement('canvas').getContext('2d');
  const gradient = greenGradient.createLinearGradient(0, 0, 0, 200);
  gradient.addColorStop(0, '#1af58a');
  gradient.addColorStop(1, 'green');

  const grayGradient = document.createElement('canvas').getContext('2d');
  const gradient2 = grayGradient.createLinearGradient(0, 0, 0, 200);
  gradient2.addColorStop(0, '#545456');
  gradient2.addColorStop(1, '#bfbfbf'); 

  const greenGradient2 = document.createElement('canvas').getContext('2d');
  const gradient3 = greenGradient2.createLinearGradient(0, 0, 0, 300);
  gradient3.addColorStop(1, '#ffffff');
  gradient3.addColorStop(0, '#C1FFC1'); 

  const blueGradient = document.createElement('canvas').getContext('2d');
  const gradient4 = blueGradient.createLinearGradient(0, 0, 0, 300);
  gradient4.addColorStop(1, '#007AFF');
  gradient4.addColorStop(0, '#00CCFF');

  const redGradient1 = document.createElement('canvas').getContext('2d');
const gradient5 = redGradient1.createLinearGradient(0, 0, 0, 200);
gradient5.addColorStop(0, '#FF0000');
gradient5.addColorStop(1, '#F08080');

const redGradient2 = document.createElement('canvas').getContext('2d');
const gradient6 = redGradient2.createLinearGradient(0, 0, 0, 300);
gradient6.addColorStop(1, '#ffffff');
  gradient6.addColorStop(0, '#FF6347');

  function TransparentizedLineChart({ data, color }) {
    let col1 = gradient
    let col2 = gradient3
    if(color === 'red') {
      col1 = gradient5
      col2 = gradient6
    }
    return (
      <Line
        data={{
          labels: [1,2,3,4,5,6,7,8,9,10,11,12,13],
          datasets: [{
            fill: {value: -25},
            data: data,
            borderColor: col1,
            tension: .3,
            backgroundColor: col2,
            pointRadius: 0,
          }]
        }}
        options={{
          maintainAspectRatio: false,
          responsive: true,
          plugins: {
            legend: {
              display: false,
            },
            title: {
              display: true,
            }
          },
          scales: {
            x: {
              display: false
            },
            y: {
              display: false
            }
          }
        }}
      />
    );
  }

  const centerLabelPlugin2= {
    id: 'center-label2',
    beforeDraw: (chart) => {
      const width = chart.width;
      const height = chart.height;
      const ctx = chart.ctx;

      ctx.restore();
      const fontSize = 3;
      ctx.font = fontSize + 'em Poppins';
      ctx.textBaseline = 'middle';

      let text = 0;

    if(responseData && responseData.backtest) {
        let x = findWin(responseData.backtest)
        let y = findLoss(responseData.backtest)
        if(x === undefined || x === null) {
          x = 9;
        }
        if(y === undefined || x === null) {
          y = 1;
        }
        setWin(x)
        setLoss(y)
        text = Math.round((x/(y + x))*100)
    }
      const textX = Math.round((width - ctx.measureText(text).width) / 2)- 15;
      const textY = height / 2 + 10;
      ctx.fillStyle = 'black';
      ctx.fillText(text, textX, textY);
      ctx.fillStyle = '#545456';
      ctx.fillText('%', textX + ctx.measureText(text).width, textY);
      
      ctx.save();
    },
  };

  function getRandMsg() {
    let msgs = ["Cooking up some juicy returns...", "Making cents of your data...", "Fetching the bull market...", "Acquiring financial wisdom...", "Investing some time to load your data...", "Raising financial IQ...", "Loading your financial future...", "Financial success loading...", "Building your portfolio...", "Getting our stocks in a row..."];
    return msgs[Math.floor(Math.random() * msgs.length)]
  }

  const icon1 = Sharpe[Sharpe.length - 2] > 0 ? 'trending_up' : 'trending_down';
  const iconColor1 = Sharpe[Sharpe.length - 2] > 0 ? 'green' : 'red';

  const icon2 = Alpha[Alpha.length - 2] > 0 ? 'trending_up' : 'trending_down';
  const iconColor2 = Alpha[Alpha.length - 2] > 0 ? 'green' : 'red';

  const icon3 = Beta[Beta.length - 2] > 0 ? 'trending_up' : 'trending_down';
  const iconColor3 = Beta[Beta.length - 2] > 0 ? 'green' : 'red';

  let strat = ''
  let allgo = ''
  if(selectedAlgorithm === 'Low Risk, Low Reward (LSTM Machine learning Simple Moving Average)') {
    strat = 'Low Risk, Low Reward'
    allgo = 'LSTM Machine learning Simple Moving Average'
  } else if(selectedAlgorithm === 'High Risk, High Reward (Dual Thrust Trading)') {
    strat = 'High Risk, High Reward'
    allgo = 'Dual Thrust Trading'
  } else if(selectedAlgorithm === 'Moderate Risk, Moderate Reward (Momentum Trading)') {
    strat = 'Moderate Risk, Moderate Reward'
    allgo = 'Momentum Trading'
  }
  return (
    isLoading ? (
      <div>
      <YourComponent/>
      <h1 className='Load'>{getRandMsg()}</h1>
      </div>
    ) : (
      <div className="App">
      <div className="header" onClick={handleBack}><img src= {logo}/></div>
      <div className='i1'>
      <h1>Trading Dashboard</h1>
      <div className='info'><span>{strat} | {allgo} | {selectedCrypto}</span></div>
      </div>
      <div className='i2'>

      <p>Here's an overview of the optimal algorithm</p>

      </div>
      
      <div className="boxes">
        <div className="b1">
        <div className="p1">
          <h1 className="txt">Compounding Annual Return</h1>
          <div className="donut" >
            <Doughnut
              data = {{
                labels: [],
                datasets: [
                  {
                    data: [100*CARData, 100 - (CARData*100)],
                    backgroundColor: [gradient, gradient2],
                    hoverOffset: 5,
                    cutout: 70,
                    borderRadius: 50,
                    offset: 10,
                  },
                ],
              }}
              plugins={[centerLabelPlugin]}
            />
          </div>
          <p>Projected profit of <span style={{ color: 'green' }}>${responseData?.backtest ? CARData*100000 : 'Data not available'}</span> over a year</p>
          </div>

        </div>
          <div className="p2">
            <div className='p2p1'>
          <h1 className="txt2">Win Percentage</h1>
          <div className="donut2" >
            <Doughnut
              data = {{
                labels: [],
                datasets: [
                  {
                    data: [Winn, Losss],
                    backgroundColor: [gradient, gradient2],
                    hoverOffset: 5,
                    cutout: 70,
                    borderRadius: 50,
                    offset: 10,
                  },
                ],
              }}
              plugins={[centerLabelPlugin2]}
            />
          </div>
          </div>

              <div className='p2p2'>
                <p>Winning Trades</p>
                <h1 className='trades'>{Winn} <span class="material-symbols-outlined" style={{ color: 'green' }}>trending_up</span></h1>
                <br/>
                <p>Losing Trades</p>
                <h1 className='trades'>{Losss} <span class="material-symbols-outlined" style={{ color: 'red' }}>trending_down</span></h1>
              </div>
              

          </div>


        <div className="b2">
              
          
          <div className='info-splitter'>
          <p>Probalistic Sharpe Ratio</p>
          <ImageWithInfoBox
            infoText="Confidence of the sharpe ratio's accuracy (Higher = more confident)"
            />
          </div>
          <h1>{(PSR[PSR.length - 1]*100).toFixed(2)}%<span class="material-symbols-outlined" style={{ fontSize: '45px', color: 'green' }}>trending_up</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={PSR.splice(0,13)} color = 'green'/>
          </div>

        </div>
        <div className="b3"></div>
      </div>
      <div className="boxes2">

  


        
        <div className='chart'>
          <h1>Price of Portfolio</h1>
      <Line
  data={{
    labels: labels,
    datasets: [{
      label: "Crypto Portfolio",
    data: data,
    borderColor: gradient,
    pointRadius: 0,
    },
    {
      borderColor: gradient4,
      label: "SPY Benchmark",
      pointRadius: 0,
      data: data2,
    }
  ]
  }}
  options={{
    maintainAspectRatio: false,
    responsive: true,
    spanGaps: true,
    plugins: {
      legend: {
        labels: {
          font: {
            family: 'Poppins',
          },
          color: 'black'
        }
      },
    },
    scales: {
      x: {
        display:false
      },
      y: {
        grid: {
          drawOnChartArea: false,
        },
        ticks: {
          font: {
            family: 'Poppins', 
            size: 12 
          },
          color: 'black'
        }
      }
    }
  }}
/>
</div>


      </div>
      <div className="boxes3">


        {/* Sharpe Ratio */}


        <div className='b4'>
          
          
        <div className='info-splitter2'>
          <p>Sharpe Ratio</p>
          <ImageWithInfoBox2
              infoText2="The measure of profit vs volatility (Higher = more profit you gain for every point of volatility taken)"
            />
          </div>
          <h1>{Sharpe[Sharpe.length - 2]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: iconColor1} }>{icon1}</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Sharpe.splice(0,13)} color = {iconColor1} />
          </div>
          </div>


        {/* Alpha */}


          <div className='b5'>
          
          
          <div className='info-splitter3'>
          <p>Alpha</p>
          <ImageWithInfoBox3
              infoText3="Return on investment after adjusting for market volatility"
              />
          </div>
          <h1>{Alpha[Alpha.length - 1]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: iconColor2} }>{icon2}</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Alpha.splice(0,13)} color = {iconColor2}/>
          </div>
          </div>



          {/* Beta */}




          <div className='b6'>
          
          
          <div className='info-splitter4'>
          <p>Beta</p>
          <ImageWithInfoBox4
              infoText4="Volatility relative to a benchmark (Ex. S&P 500)"
            />
          </div>
          <h1>{Beta[Beta.length - 1]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: iconColor3} }>{icon3}</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Beta.splice(0,13)} color = {iconColor3}/>
          </div>
          </div>
  </div>
    </div>

    


    )
  );
}





function App() {
  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');
  const [selectedCrypto, setSelectedCrypto] = useState('');

  return (
    <Router>
      <Routes>
        <Route path="/crypto" element={<CryptoPage setSelectedCrypto={setSelectedCrypto} />} />
        <Route path="/stats" element={<StatisticsPage selectedAlgorithm={selectedAlgorithm} selectedCrypto={selectedCrypto} />} />
        <Route path="/" element={<AlgorithmPage setSelectedAlgorithm={setSelectedAlgorithm} />} />
      </Routes>
    </Router>
  );
}

export default App;
