import logo from './cryptosight-logo.png';
import './App.css';
import { Bubble, Doughnut } from 'react-chartjs-2';
import { Line } from 'react-chartjs-2';
import React, { useState, useEffect, useRef } from 'react';
import { Chart, LineElement } from 'chart.js';
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import $, { merge } from 'jquery'
import colorLib from '@kurkle/color';
import { LinearScale, Utils } from 'chart.js'; 
import { ArcElement, Legend, Tooltip, CategoryScale, PointElement, Filler } from 'chart.js';
import { toBePartiallyChecked, toHaveTextContent } from '@testing-library/jest-dom/matchers';
import YourComponent from './animatedlogo';
import ImageWithInfoBox from './ImageWithInfoBox';
import ImageWithInfoBox2 from './ImageWithInfoBox2';
import ImageWithInfoBox3 from './ImageWithInfoBox3';
import ImageWithInfoBox4 from './ImageWithInfoBox4';

Chart.register(ArcElement, Tooltip, Legend, CategoryScale, PointElement, LinearScale, LineElement, Filler);

function AlgorithmPage({ setSelectedAlgorithm }) {
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [selected, setSelected] = useState('Select an algorithm');
  const [dropdownHeight, setDropdownHeight] = useState(0);
  const dropdownRef = useRef(null);

  useEffect(() => {
    if (dropdownVisible && dropdownRef.current) {
      setDropdownHeight(dropdownRef.current.getBoundingClientRect().height);
    }
  }, [dropdownVisible]);

  const handleAlgorithmChange = (event) => {
    setSelectedAlgorithm(event.target.textContent);
    setSelected(event.target.textContent);
    setDropdownVisible(false);
  }

  return (
    <div className="container">
      <div className="logo-container">
        <img src={logo} className="logo" alt="Logo" />
      </div>
      <div className="dropdown" onMouseEnter={() => setDropdownVisible(true)} onMouseLeave={() => setDropdownVisible(false)}>
        <button className="algotxt">{selected}</button>
        <div className="dropdown-content" ref={dropdownRef} style={{display: dropdownVisible ? 'block' : 'none'}}>
          <button onClick={handleAlgorithmChange} className="algorithm">LSTM Machine learning Simple Moving Average</button>
          <button onClick={handleAlgorithmChange} className="algorithm">Simple Moving Average</button>
          <button onClick={handleAlgorithmChange} className="algorithm">Momentum Trading</button>
          <button onClick={handleAlgorithmChange} className="algorithm">Reverse Trading</button>
          <button onClick={handleAlgorithmChange} className="algorithm">Pairs trading</button>
        </div>
      </div>
      <Link to="/crypto" className="next-link" style={{marginTop: dropdownVisible ? `${dropdownHeight + 20}px` : '50px'}}>Next</Link>
    </div>
  );
}

function CryptoPage({ setSelectedCrypto }) {
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [selected, setSelected] = useState('Select a Crypto');

  const handleCryptoChange = (event) => {
    setSelectedCrypto(event.target.textContent);
    setSelected(`${event.target.textContent} selected`);
    setDropdownVisible(false);
  }

  return (
    <div className="container">
      <div className="logo-container">
        <img src={logo} className="logo" alt="Logo" />
      </div>
      <div className="dropdown" onMouseEnter={() => setDropdownVisible(true)} onMouseLeave={() => setDropdownVisible(false)}>
        <button className="cryptotxt">{selected}</button>
        <div className="dropdown-content" style={{display: dropdownVisible ? 'block' : 'none'}}>
          <button onClick={handleCryptoChange} className="btc">BTCUSD</button>
          <button onClick={handleCryptoChange} className="eth">ETHUSD</button>
          <button onClick={handleCryptoChange} className="tet">USDT</button>
          <button onClick={handleCryptoChange} className="xrp">XRPUSD</button>
          <button onClick={handleCryptoChange} className="bnb">BNBUSD</button>
        </div>
      </div>
      <Link to="/stats" className="next-link" style={{marginTop: dropdownVisible ? '200px' : '70px'}}>Next</Link>
    </div>
  );
}

function StatisticsPage({ selectedAlgorithm, selectedCrypto }) {
  const [responseData, setResponseData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState([]);  // y
  const [labels, setLabels] = useState([]);  // x
  const [CARData, setCARData] = useState();
  const [Winn, setWin] = useState();
  const [Losss, setLoss] = useState();
  const [data2, setData2] = useState([]);

  const [Sharpe, setSharpe] = useState([]);
  const [PSR, setPSR] = useState([]);
  const [Alpha, setAlpha] = useState([]);
  const [Beta, SetBeta] = useState([]);

  const navigate = useNavigate();
  const handleBack = () => {
    navigate(-2);
  }

  useEffect(() => {
      $.ajax({
        url: '/sim',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          selectedAlgorithm: selectedAlgorithm,
          selectedCrypto: selectedCrypto,
        }),
        beforeSend: function () {
          setIsLoading(true);
        },
        success: function (response) {
          setIsLoading(false);
          setResponseData(response.value); // Save the specific data from the response
        },
    })
  
}, [selectedAlgorithm, selectedCrypto]);

useEffect(() => {
  if (responseData && responseData.backtest) {

    const values = responseData.backtest.charts['Strategy Equity'].Series.Equity.Values;
    const newData = [];
    const newLabels = [];

    for (const point of values) {
      if (point.hasOwnProperty('x') && point.hasOwnProperty('y')) {
        newLabels.push(point.x);
        newData.push(point.y);
      }
    }
    setLabels(newLabels)
    setData(newData)

    const xArray = [1641013200,1641099600,1641186000,1641222000,1641232800,1641243600,1641272400,1641308400,1641319200,1641330000,1641358800,1641394800,1641405600,1641416400,1641445200,1641481200,1641492000,1641502800,1641531600,1641567600,1641578400,1641589200,1641618000,1641704400,1641790800,1641826800,1641837600,1641848400,1641877200,1641913200,1641924000,1641934800,1641963600,1641999600,1642010400,1642021200,1642050000,1642086000,1642096800,1642107600,1642136400,1642172400,1642183200,1642194000,1642222800,1642309200,1642395600,1642482000,1642518000,1642528800,1642539600,1642568400,1642604400,1642615200,1642626000,1642654800,1642690800,1642701600,1642712400,1642741200,1642777200,1642788000,1642798800,1642827600,1642914000,1643000400,1643036400,1643047200,1643058000,1643086800,1643122800,1643133600,1643144400,1643173200,1643209200,1643220000,1643230800,1643259600,1643295600,1643306400,1643317200,1643346000,1643382000,1643392800,1643403600,1643432400,1643518800,1643605200,1643641200,1643652000,1643662800,1643691600,1643727600,1643738400,1643749200,1643778000,1643814000,1643824800,1643835600,1643864400,1643900400,1643911200,1643922000,1643950800,1643986800,1643997600,1644008400,1644037200,1644123600,1644210000,1644246000,1644256800,1644267600,1644296400,1644332400,1644343200,1644354000,1644382800,1644418800,1644429600,1644440400,1644469200,1644505200,1644516000,1644526800,1644555600,1644591600,1644602400,1644613200,1644642000,1644728400,1644814800,1644850800,1644861600,1644872400,1644901200,1644937200,1644948000,1644958800,1644987600,1645023600,1645034400,1645045200,1645074000,1645110000,1645120800,1645131600,1645160400,1645196400,1645207200,1645218000,1645246800,1645333200,1645419600,1645506000,1645542000,1645552800,1645563600,1645592400,1645628400,1645639200,1645650000,1645678800,1645714800,1645725600,1645736400,1645765200,1645801200,1645812000,1645822800,1645851600,1645938000,1646024400,1646060400,1646071200,1646082000,1646110800,1646146800,1646157600,1646168400,1646197200,1646233200,1646244000,1646254800,1646283600,1646319600,1646330400,1646341200,1646370000,1646406000,1646416800,1646427600,1646456400,1646542800,1646629200,1646665200,1646676000,1646686800,1646715600,1646751600,1646762400,1646773200,1646802000,1646838000,1646848800,1646859600,1646888400,1646924400,1646935200,1646946000,1646974800,1647010800,1647021600,1647032400,1647061200,1647147600,1647230400,1647266400,1647277200,1647288000,1647316800,1647352800,1647363600,1647374400,1647403200,1647439200,1647450000,1647460800,1647489600,1647525600,1647536400,1647547200,1647576000,1647612000,1647622800,1647633600,1647662400,1647748800,1647835200,1647871200,1647882000,1647892800,1647921600,1647957600,1647968400,1647979200,1648008000,1648044000,1648054800,1648065600,1648094400,1648130400,1648141200,1648152000,1648180800,1648216800,1648227600,1648238400,1648267200,1648353600,1648440000,1648476000,1648486800,1648497600,1648526400,1648562400,1648573200,1648584000,1648612800,1648648800,1648659600,1648670400,1648699200,1648735200,1648746000,1648756800,1648785600,1648821600,1648832400,1648843200,1648872000,1648958400,1649044800,1649080800,1649091600,1649102400,1649131200,1649167200,1649178000,1649188800,1649217600,1649253600,1649264400,1649275200,1649304000,1649340000,1649350800,1649361600,1649390400,1649426400,1649437200,1649448000,1649476800,1649563200,1649649600,1649685600,1649696400,1649707200,1649736000,1649772000,1649782800,1649793600,1649822400,1649858400,1649869200,1649880000,1649908800,1649944800,1649955600,1649966400,1649995200,1650081600,1650168000,1650254400,1650290400,1650301200,1650312000,1650340800,1650376800,1650387600,1650398400,1650427200,1650463200,1650474000,1650484800,1650513600,1650549600,1650560400,1650571200,1650600000,1650636000,1650646800,1650657600,1650686400,1650772800,1650859200,1650895200,1650906000,1650916800,1650945600,1650981600,1650992400,1651003200,1651032000,1651068000,1651078800,1651089600,1651118400,1651154400,1651165200,1651176000,1651204800,1651240800,1651251600,1651262400,1651291200,1651377600,1651464000,1651500000,1651510800,1651521600,1651550400,1651586400,1651597200,1651608000,1651636800,1651672800,1651683600,1651694400,1651723200,1651759200,1651770000,1651780800,1651809600,1651845600,1651856400,1651867200,1651896000,1651982400,1652068800,1652104800,1652115600,1652126400,1652155200,1652191200,1652202000,1652212800,1652241600,1652277600,1652288400,1652299200,1652328000,1652364000,1652374800,1652385600,1652414400,1652450400,1652461200,1652472000,1652500800,1652587200,1652673600,1652709600,1652720400,1652731200,1652760000,1652796000,1652806800,1652817600,1652846400,1652882400,1652893200,1652904000,1652932800,1652968800,1652979600,1652990400,1653019200,1653055200,1653066000,1653076800,1653105600,1653192000,1653278400,1653314400,1653325200,1653336000,1653364800,1653400800,1653411600,1653422400,1653451200,1653487200,1653498000,1653508800,1653537600,1653573600,1653584400,1653595200,1653624000,1653660000,1653670800,1653681600,1653710400,1653796800,1653883200,1653969600,1654005600,1654016400,1654027200,1654056000,1654092000,1654102800,1654113600,1654142400,1654178400,1654189200,1654200000,1654228800,1654264800,1654275600,1654286400,1654315200,1654401600,1654488000,1654524000,1654534800,1654545600,1654574400,1654610400,1654621200,1654632000,1654660800,1654696800,1654707600,1654718400,1654747200,1654783200,1654794000,1654804800,1654833600,1654869600,1654880400,1654891200,1654920000,1655006400,1655092800,1655128800,1655139600,1655150400,1655179200,1655215200,1655226000,1655236800,1655265600,1655301600,1655312400,1655323200,1655352000,1655388000,1655398800,1655409600,1655438400,1655474400,1655485200,1655496000,1655524800,1655611200,1655697600,1655784000,1655820000,1655830800,1655841600,1655870400,1655906400,1655917200,1655928000,1655956800,1655992800,1656003600,1656014400,1656043200,1656079200,1656090000,1656100800,1656129600,1656216000,1656302400,1656338400,1656349200,1656360000,1656388800,1656424800,1656435600,1656446400,1656475200,1656511200,1656522000,1656532800,1656561600,1656597600,1656608400,1656619200,1656648000,1656684000,1656694800,1656705600,1656734400,1656820800,1656907200,1656993600,1657029600,1657040400,1657051200,1657080000,1657116000,1657126800,1657137600,1657166400,1657202400,1657213200,1657224000,1657252800,1657288800,1657299600,1657310400,1657339200,1657425600,1657512000,1657548000,1657558800,1657569600,1657598400,1657634400,1657645200,1657656000,1657684800,1657720800,1657731600,1657742400,1657771200,1657807200,1657818000,1657828800,1657857600,1657893600,1657904400,1657915200,1657944000,1658030400,1658116800,1658152800,1658163600,1658174400,1658203200,1658239200,1658250000,1658260800,1658289600,1658325600,1658336400,1658347200,1658376000,1658412000,1658422800,1658433600,1658462400,1658498400,1658509200,1658520000,1658548800,1658635200,1658721600,1658757600,1658768400,1658779200,1658808000,1658844000,1658854800,1658865600,1658894400,1658930400,1658941200,1658952000,1658980800,1659016800,1659027600,1659038400,1659067200,1659103200,1659114000,1659124800,1659153600,1659240000,1659326400,1659362400,1659373200,1659384000,1659412800,1659448800,1659459600,1659470400,1659499200,1659535200,1659546000,1659556800,1659585600,1659621600,1659632400,1659643200,1659672000,1659708000,1659718800,1659729600,1659758400,1659844800,1659931200,1659967200,1659978000,1659988800,1660017600,1660053600,1660064400,1660075200,1660104000,1660140000,1660150800,1660161600,1660190400,1660226400,1660237200,1660248000,1660276800,1660312800,1660323600,1660334400,1660363200,1660449600,1660536000,1660572000,1660582800,1660593600,1660622400,1660658400,1660669200,1660680000,1660708800,1660744800,1660755600,1660766400,1660795200,1660831200,1660842000,1660852800,1660881600,1660917600,1660928400,1660939200,1660968000,1661054400,1661140800,1661176800,1661187600,1661198400,1661227200,1661263200,1661274000,1661284800,1661313600,1661349600,1661360400,1661371200,1661400000,1661436000,1661446800,1661457600,1661486400,1661522400,1661533200,1661544000,1661572800,1661659200,1661745600,1661781600,1661792400,1661803200,1661832000,1661868000,1661878800,1661889600,1661918400,1661954400,1661965200,1661976000,1662004800,1662040800,1662051600,1662062400,1662091200,1662127200,1662138000,1662148800,1662177600,1662264000,1662350400,1662436800,1662472800,1662483600,1662494400,1662523200,1662559200,1662570000,1662580800,1662609600,1662645600,1662656400,1662667200,1662696000,1662732000,1662742800,1662753600,1662782400,1662868800,1662955200,1662991200,1663002000,1663012800,1663041600,1663077600,1663088400,1663099200,1663128000,1663164000,1663174800,1663185600,1663214400,1663250400,1663261200,1663272000,1663300800,1663336800,1663347600,1663358400,1663387200,1663473600,1663560000,1663596000,1663606800,1663617600,1663646400,1663682400,1663693200,1663704000,1663732800,1663768800,1663779600,1663790400,1663819200,1663855200,1663866000,1663876800,1663905600,1663941600,1663952400,1663963200,1663992000,1664078400,1664164800,1664200800,1664211600,1664222400,1664251200,1664287200,1664298000,1664308800,1664337600,1664373600,1664384400,1664395200,1664424000,1664460000,1664470800,1664481600,1664510400,1664546400,1664557200,1664568000,1664596800,1664683200,1664769600,1664805600,1664816400,1664827200,1664856000,1664892000,1664902800,1664913600,1664942400,1664978400,1664989200,1665000000,1665028800,1665064800,1665075600,1665086400,1665115200,1665151200,1665162000,1665172800,1665201600,1665288000,1665374400,1665410400,1665421200,1665432000,1665460800,1665496800,1665507600,1665518400,1665547200,1665583200,1665594000,1665604800,1665633600,1665669600,1665680400,1665691200,1665720000,1665756000,1665766800,1665777600,1665806400,1665892800,1665979200,1666015200,1666026000,1666036800,1666065600,1666101600,1666112400,1666123200,1666152000,1666188000,1666198800,1666209600,1666238400,1666274400,1666285200,1666296000,1666324800,1666360800,1666371600,1666382400,1666411200,1666497600,1666584000,1666620000,1666630800,1666641600,1666670400,1666706400,1666717200,1666728000,1666756800,1666792800,1666803600,1666814400,1666843200,1666879200,1666890000,1666900800,1666929600,1666965600,1666976400,1666987200,1667016000,1667102400,1667188800,1667224800,1667235600,1667246400,1667275200,1667311200,1667322000,1667332800,1667361600,1667397600,1667408400,1667419200,1667448000,1667484000,1667494800,1667505600,1667534400,1667570400,1667581200,1667592000,1667620800,1667707200,1667797200,1667833200,1667844000,1667854800,1667883600,1667919600,1667930400,1667941200,1667970000,1668006000,1668016800,1668027600,1668056400,1668092400,1668103200,1668114000,1668142800,1668178800,1668189600,1668200400,1668229200,1668315600,1668402000,1668438000,1668448800,1668459600,1668488400,1668524400,1668535200,1668546000,1668574800,1668610800,1668621600,1668632400,1668661200,1668697200,1668708000,1668718800,1668747600,1668783600,1668794400,1668805200,1668834000,1668920400,1669006800,1669042800,1669053600,1669064400,1669093200,1669129200,1669140000,1669150800,1669179600,1669215600,1669226400,1669237200,1669266000,1669352400,1669388400,1669399200,1669438800,1669525200,1669611600,1669647600,1669658400,1669669200,1669698000,1669734000,1669744800,1669755600,1669784400,1669820400,1669831200,1669842000,1669870800,1669906800,1669917600,1669928400,1669957200,1669993200,1670004000,1670014800,1670043600,1670130000,1670216400,1670252400,1670263200,1670274000,1670302800,1670338800,1670349600,1670360400,1670389200,1670425200,1670436000,1670446800,1670475600,1670511600,1670522400,1670533200,1670562000,1670598000,1670608800,1670619600,1670648400,1670734800,1670821200,1670857200,1670868000,1670878800,1670907600,1670943600,1670954400,1670965200,1670994000,1671030000,1671040800,1671051600,1671080400,1671116400,1671127200,1671138000,1671166800,1671202800,1671213600,1671224400,1671253200,1671339600,1671426000,1671462000,1671472800,1671483600,1671512400,1671548400,1671559200,1671570000,1671598800,1671634800,1671645600,1671656400,1671685200,1671721200,1671732000,1671742800,1671771600,1671807600,1671818400,1671829200,1671858000,1671944400,1672030800,1672117200,1672153200,1672164000,1672174800,1672203600,1672239600,1672250400,1672261200,1672290000,1672326000,1672336800,1672347600,1672376400,1672412400,1672423200,1672434000]


    const yArray = [100000,100000,100000,99998.925,100137.5136,100580.5769,100580.5769,100992.1429,100389.4927,100546.9797,100546.9797,100475.5856,100211.0075,98621.4388,98621.4388,98336.9123,98871.3182,98529.0464,98529.0464,98680.2339,98388.3581,98140.5785,98140.5785,98140.5785,98140.5785,96727.3953,96702.1974,98018.7886,98018.7886,97462.3346,98491.2496,98909.115,98909.115,99513.8651,99316.4814,99175.793,99175.793,99455.0699,98463.9518,97813.0056,97813.0056,97783.608,97000.3727,97852.9023,97852.9023,97852.9023,97852.9023,97852.9023,96479.6157,95979.857,96124.7451,96124.7451,96751.5433,96456.5177,95129.4273,95129.4273,96170.9412,96175.1409,94079.514,94079.514,93424.3682,93262.6815,92237.9662,92237.9662,92237.9662,92237.9662,90373.3202,89575.3861,92628.5339,92628.5339,90377.5199,90883.5781,91500.9271,91500.9271,93073.6971,93065.2978,91272.046,91272.046,92718.8264,91400.1354,90822.6831,90822.6831,90243.131,91519.8255,93071.5973,93071.5973,93071.5973,93071.5973,93361.3734,94199.2041,94743.0592,94743.0592,94715.7615,94854.35,95381.4065,95381.4065,95713.1791,96194.0393,96305.3301,96305.3301,94818.653,94743.0592,94048.0166,94048.0166,94171.9064,94461.6825,94488.9802,94488.9802,94488.9802,94488.9802,94745.159,94270.5982,94186.6052,94186.6052,94006.0201,94887.9472,94959.3413,94959.3413,95902.1634,96160.4421,96345.2268,96345.2268,95847.568,95545.1929,94619.1694,94619.1694,94589.7719,94065.8652,92758.7231,92758.7231,92758.7231,92758.7231,92691.5287,92849.0157,92456.3481,92456.3481,93508.3612,93472.6642,93943.0253,93943.0253,93243.7831,93266.8812,94048.0166,94048.0166,92827.8074,92901.5113,92044.7821,92044.7821,92309.3603,91085.1614,91450.5312,91450.5312,91450.5312,91450.5312,91450.5312,91450.5312,90440.5147,90472.0121,90472.0121,90805.8845,90146.5389,88871.9442,88871.9442,87567.952,87712.84,90205.3341,90205.3341,90251.5303,91780.204,92189.6702,92189.6702,92189.6702,92189.6702,91458.9305,91316.1423,91954.4896,91954.4896,91582.8203,90875.1787,90558.1049,90558.1049,91320.342,92193.8698,92219.0677,92219.0677,92607.5356,92212.7682,91761.3055,91761.3055,90940.2734,90968.621,91017.967,91017.967,91017.967,91017.967,90110.8419,89096.6257,88342.788,88342.788,88189.5006,89550.1882,87675.0431,87675.0431,89329.7064,90216.0432,90018.4495,90018.4495,89413.6995,88771.1526,89613.183,89613.183,89961.7542,89300.3089,88477.1769,88477.1769,88477.1769,88477.1769,88741.755,88021.5145,87832.5301,87832.5301,88542.2715,89218.4156,89758.071,89758.071,90967.5711,90910.8758,91742.4071,91742.4071,91859.9974,92189.6702,92886.8126,92886.8126,92742.7347,93248.2587,93901.2271,93901.2271,93901.2271,93901.2271,93779.0588,93452.5746,93873.8446,93873.8446,94467.8352,94846.9782,94969.1465,94969.1465,94229.8177,94381.4749,93749.5699,93749.5699,94124.5002,94583.6845,95158.718,95158.718,95240.8656,95068.1449,95622.1149,95622.1149,95622.1149,95622.1149,95801.1547,95400.9482,96300.3596,96300.3596,97012.3058,96805.8835,97488.3409,97488.3409,97351.4281,97140.7932,96888.0312,96888.0312,96725.8422,96468.8676,95400.9482,95400.9482,95531.5419,95044.9751,95670.561,95670.561,95670.561,95670.561,96009.6833,96091.8309,96487.8247,96487.8247,96513.1009,95807.4737,95272.4609,95272.4609,94126.6065,94061.3097,94322.4971,94322.4971,94425.7082,93848.5684,94796.4258,94796.4258,94242.4558,95094.4743,94543.6638,94543.6638,94543.6638,94543.6638,93816.9731,93338.8317,92932.3062,92932.3062,94014.97,93374.6396,92588.9712,92588.9712,92744.841,93383.065,93646.3588,93646.3588,93404.1285,92966.0078,92483.6537,92483.6537,92483.6537,92483.6537,92483.6537,92483.6537,92224.5726,92521.568,92521.568,93248.2587,93661.1032,94010.7573,94010.7573,94006.5446,94269.8383,93941.2478,93941.2478,94918.5941,93511.5524,92540.5251,92540.5251,91750.6439,90935.4865,90008.6926,90008.6926,90008.6926,90008.6926,88799.6478,89166.1527,90528.961,90528.961,89547.402,89206.1733,87914.9809,87914.9809,88894.4335,89168.259,88161.4238,88161.4238,88827.0303,89916.0132,90381.5165,90381.5165,89937.0767,88247.5735,87051.3774,87051.3774,87051.3774,87051.3774,87108.2489,86417.3661,87573.7522,87573.7522,87771.7491,88097.1801,87973.9587,87973.9587,87904.4491,88324.6659,90644.8103,90644.8103,89067.1542,87584.2839,87432.6268,87432.6268,85859.1834,87428.4141,86912.3583,86912.3583,86912.3583,86912.3583,85614.8468,84677.5212,84138.2956,84138.2956,85393.6801,83668.5796,84332.0798,84332.0798,84997.6863,83887.64,82996.654,82996.654,82116.1998,82505.8745,82910.2936,82910.2936,84239.4004,84887.103,84886.0498,84886.0498,84886.0498,84886.0498,84235.1877,84492.1624,84542.7148,84542.7148,85616.9532,85838.1199,86276.2407,86276.2407,84768.0942,83900.2781,82809.1889,82809.1889,82139.3696,82406.876,82303.6649,82303.6649,83017.7175,80938.7502,82339.4728,82339.4728,82339.4728,82339.4728,82882.9111,83679.1113,83875.0019,83875.0019,82573.2777,82467.9602,83236.7779,83236.7779,83352.6271,83354.7335,83969.7876,83969.7876,85062.9832,85857.0771,85642.2294,85642.2294,86844.9551,87137.7378,87738.0475,87738.0475,87738.0475,87738.0475,87738.0475,86884.9758,87714.8776,87247.268,87247.268,87636.9427,86208.8375,86543.7471,86543.7471,86261.4962,87535.8379,88186.7,88186.7,87295.714,87085.079,86743.8504,86743.8504,86743.8504,86743.8504,87716.984,87139.8441,87007.1441,87007.1441,86566.917,87152.4822,87839.1523,87839.1523,87742.2602,87203.0346,86887.0821,86887.0821,86967.1234,86701.7234,84827.072,84827.072,83123.035,82531.1507,82375.2808,82375.2808,82375.2808,82375.2808,80266.8246,79927.7023,79257.883,79257.883,79786.5768,79045.1417,79019.8655,79019.8655,80011.9563,79504.326,80142.55,80142.55,77958.2652,77707.6095,77499.0809,77499.0809,78200.7527,77629.5818,77665.5444,77665.5444,77665.5444,77665.5444,77665.5444,79565.2167,79717.5289,79613.872,79613.872,79290.2084,79907.9192,79470.0215,79470.0215,80024.2689,79296.5548,80246.3909,80246.3909,81454.3117,82185.199,82789.1594,82789.1594,82789.1594,82789.1594,82361.8389,82732.0423,82473.9577,82473.9577,83182.6327,81617.2012,80794.292,80794.292,80883.1408,80574.0738,80728.7131,80728.7131,79252.1304,80565.8236,80075.0396,80075.0396,80375.4332,79747.1452,80919.1034,80919.1034,80919.1034,80919.1034,80919.1034,79364.2491,79681.5663,81071.4156,81071.4156,81094.6856,80857.7554,81344.3084,81344.3084,82220.1039,82361.8389,82558.5756,82558.5756,81987.4046,82175.6795,82490.8812,82490.8812,82490.8812,82490.8812,81640.4711,81716.6273,81551.6223,81551.6223,81454.3117,81676.4338,80832.37,80832.37,80142.734,80826.0237,80409.2804,80409.2804,79034.2392,79372.7109,80214.6592,80214.6592,80950.8351,81454.3117,81742.0127,81742.0127,81742.0127,81742.0127,82408.3788,82169.3331,81069.3002,81069.3002,82112.2161,82876.9505,83252.4425,83252.4425,83076.8603,83764.3809,83781.3045,83781.3045,83819.3826,84322.8592,84631.7146,84631.7146,84456.1324,83880.7306,83848.9989,83848.9989,83848.9989,83848.9989,83937.8477,84003.4266,83950.5404,83950.5404,83468.2182,83114.9384,82960.5107,82960.5107,83904.0005,84047.851,85107.6904,85107.6904,84748.0643,85755.0175,86171.7608,86171.7608,86827.5496,87104.6733,87424.106,87424.106,87424.106,87424.106,87254.8701,87396.6051,87166.0213,87166.0213,86713.3154,87559.4946,86592.7349,86592.7349,87335.2572,87917.0054,87944.5062,87944.5062,87950.8525,87680.0752,87885.2736,87885.2736,87438.9141,87527.7629,87737.1923,87737.1923,87737.1923,87737.1923,88519.908,87709.6914,87635.6508,87635.6508,87242.1774,87197.753,87288.7173,87288.7173,88737.7992,88917.6123,89116.4644,89116.4644,89820.9085,89626.2873,89116.4644,89116.4644,89668.5963,90002.8371,90620.5479,90620.5479,90620.5479,90620.5479,90586.7007,90980.174,90992.8667,90992.8667,90899.787,91187.488,91170.5644,91170.5644,90594.1048,90493.621,90525.3527,90525.3527,90394.195,90467.1779,90787.6683,90787.6683,89789.1768,89817.7354,89571.2857,89571.2857,89571.2857,89571.2857,88312.5941,88094.703,87711.8069,87711.8069,87823.9256,87654.6898,87500.2621,87500.2621,87483.3385,87652.5744,87779.5012,87779.5012,88357.0185,88160.2819,89014.9229,89014.9229,88947.2285,87077.1725,86010.9867,86010.9867,86010.9867,86010.9867,85486.3556,85873.4826,85444.0466,85444.0466,85260.0027,84464.5942,84509.0186,84509.0186,84805.1813,84399.0153,83868.0379,83868.0379,83366.6767,82928.779,84130.3534,84130.3534,84468.8251,84162.0852,83246.0962,83246.0962,83246.0962,83246.0962,83246.0962,83104.3612,83120.227,82933.0099,82933.0099,83142.4392,83764.3809,84418.0544,84418.0544,84327.0901,84439.2088,84968.0708,84968.0708,85790.9801,86150.6063,86283.8795,86283.8795,86283.8795,86283.8795,87218.9075,87056.018,87208.3303,87208.3303,85071.7278,84549.2121,83428.0247,83428.0247,83853.2298,83884.9615,83745.3419,83745.3419,83863.807,83223.884,82797.6212,82797.6212,81528.7403,81734.7819,82168.1064,82168.1064,82168.1064,82168.1064,82017.2925,82287.0583,82803.2243,82803.2243,81802.7544,81881.3475,81855.8579,81855.8579,82312.548,82244.5755,80432.684,80432.684,79918.6422,79959.0008,79759.3317,79759.3317,78393.5096,78144.9853,78427.4959,78427.4959,78427.4959,78427.4959,78523.0822,77921.9506,77654.3089,77654.3089,78518.8339,77322.9431,77456.7639,77456.7639,77647.9365,78618.6685,78975.524,78975.524,77412.1569,77216.7361,77331.4396,77331.4396,77395.1638,77297.4534,76139.7971,76139.7971,76139.7971,76139.7971,76876.8737,77650.0606,78142.8611,78142.8611,80139.5527,80175.6631,80555.8842,80555.8842,79752.9592,79978.1181,80368.9598,80368.9598,80184.1597,80024.8492,79542.6694,79542.6694,77913.454,77548.1019,77331.4396,77331.4396,77331.4396,77331.4396,77089.2877,76392.5697,76743.0528,76743.0528,76018.7211,77199.7429,76258.7489,76258.7489,76494.5285,76439.3008,76008.1004,76008.1004,75030.996,77363.3017,78006.9162,78006.9162,78140.737,76594.363,76235.3834,76235.3834,76235.3834,76235.3834,77985.6748,78123.7439,78187.4681,78187.4681,79521.428,78956.4067,79102.9724,79102.9724,78563.4408,78278.8061,78544.3236,78544.3236,78671.772,78425.1593,77887.9643,77887.9643,78667.5237,79132.7104,79774.2006,79774.2006,79774.2006,79774.2006,80492.16,80496.4082,80747.0568,80747.0568,81494.7541,81637.0714,82032.1615,82032.1615,81348.1884,81908.9614,81416.1609,81416.1609,81244.1055,81312.078,80982.8363,80982.8363,81522.3679,82505.8447,82903.0589,82903.0589,82903.0589,82903.0589,82151.1133,82316.7962,82306.1755,82306.1755,82703.3897,81991.8028,81947.1959,81947.1959,81503.2506,81510.6851,79897.4008,79897.4008,78684.5168,79687.1109,79077.4827,79077.4827,79946.256,79136.9586,80211.7735,80211.7735,80211.7735,80211.7735,80160.7941,80354.0909,80976.4639,80976.4639,81072.0502,81938.6993,81411.9126,81411.9126,80714.1326,80672.7119,79740.2144,79740.2144,83063.4315,82924.3003,84107.4463,84107.4463,84207.2809,84420.7569,84918.8678,84918.8678,84918.8678,84918.8678,84619.364,84944.3574,84198.7843,84198.7843,85579.4753,85228.9922,84914.6195,84914.6195,84460.0535,84536.5226,84268.8809,84268.8809,83189.8178,84018.2324,84011.86,84011.86,84341.1017,83924.7702,84392.081,84392.081,84392.081,84392.081,84220.0257,83948.1358,84086.2049,84086.2049,84368.7155,84697.9572,85214.1232,85214.1232,85522.1235,85190.7577,85749.4065,85749.4065,85749.4065,85751.5306,85730.2892,85730.2892,85730.2892,85730.2892,85203.5025,84736.1917,84366.5914,84366.5914,84313.4879,84162.6739,84222.1498,84222.1498,84215.7774,84005.4876,86866.7042,86866.7042,87168.332,86788.111,86802.98,86802.98,85889.5997,86246.4553,86703.1454,86703.1454,86703.1454,86703.1454,85936.3308,85311.8337,85148.2749,85148.2749,84638.4813,83975.7496,83924.7702,83924.7702,83708.108,83899.2806,83782.4529,83782.4529,84423.9431,84351.7224,84436.688,84436.688,84319.8603,84506.7846,83807.9425,83807.9425,83807.9425,83807.9425,84096.8256,84331.543,85012.3299,85012.3299,87217.1873,85237.4888,85653.8202,85653.8202,86053.1585,85989.4343,85107.9162,85107.9162,83446.8387,82871.1968,83032.6314,83032.6314,82610.42,81608.5557,82055.6069,82055.6069,82055.6069,82055.6069,81874.2258,81658.7022,81362.0906,81362.0906,81364.2245,81598.9531,81473.0533,81473.0533,82027.8663,82723.5165,82687.2402,82687.2402,81697.1124,80617.3608,81511.4634,81511.4634,81037.7384,81756.8615,81978.7867,81978.7867,81978.7867,81978.7867,81978.7867,81470.9194,81810.2089,81656.5683,81656.5683,81810.2089,81212.7179,80645.1015,80645.1015,81699.2463,82169.7704,82091.8832,82091.8832,81453.8482,81560.543,81876.3596]

    let mergedYvalues = []
    for(let i = 0; i < newData.length; i++) {
      const index = xArray.indexOf(newLabels[i])  
      if(index !== -1) {
        mergedYvalues.push(yArray[index])
      } else {
        mergedYvalues.push(null)
      }
    }
    setData2(mergedYvalues)

    let Sharpe = [];
    let PSR = [];
    let Alpha = [];
    let Beta = [];
    const findData = (obj) => {
      for(const key in obj) {
        if(typeof obj[key] === 'object') {
          findData(obj[key])
        } else if(key === 'SharpeRatio' && obj[key] >= 0) {
          Sharpe.push(obj[key])
        } else if(key === 'ProbabilisticSharpeRatio' && obj[key] >= 0) {
          PSR.push(obj[key])
        } else if(key === 'Alpha' && obj[key] >= 0) {
          Alpha.push(obj[key])
        } else if(key === 'Beta' && obj[key] >= 0) {
          Beta.push(obj[key])
        }
      }
    }
    findData(responseData.backtest)

    setSharpe(Sharpe)
    setPSR(PSR)
    setAlpha(Alpha)
    SetBeta(Beta)
  }

}, [responseData]);
let CARs = []
const findCAR = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findCAR(obj[key]); // Continue exploring nested objects
    } else if (key === 'CompoundingAnnualReturn' && obj[key] !== 0) {
      CARs.push(obj[key]); // Save the value if the key matches
    }
  }
  return CARs[CARs.length - 1]
};
let Win = []
const findWin = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findWin(obj[key]); // Continue exploring nested objects
    } else if (key === 'NumberOfWinningTrades' && obj[key] !== 0) {
      Win.push(obj[key]); // Save the value if the key matches
    }
  }
  return Win[Win.length - 1]
};
let Loss = []
const findLoss = (obj) => {
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      findLoss(obj[key]); // Continue exploring nested objects
    } else if (key === 'NumberOfLosingTrades' && obj[key] !== 0) {
      Loss.push(obj[key]); // Save the value if the key matches
    }
  }
  return Loss[Loss.length - 1]
};

const centerLabelPlugin= {
  id: 'center-label',
  beforeDraw: (chart) => {
    const width = chart.width;
    const height = chart.height;
    const ctx = chart.ctx;

    ctx.restore();
    const fontSize = 3;
    ctx.font = fontSize + 'em Poppins';
    ctx.textBaseline = 'middle';

    let text = 0;

    if(responseData && responseData.backtest) {
        text = findCAR(responseData.backtest);
        setCARData(text)
        text = Math.round(text * 100)

    }
    const textX = Math.round((width - ctx.measureText(text).width) / 2)- 15;
    const textY = height / 2 + 10;
    ctx.fillStyle = 'black';
    ctx.fillText(text, textX, textY);
    ctx.fillStyle = '#545456';
    ctx.fillText('%', textX + ctx.measureText(text).width, textY);
    
    ctx.save();
  },
};




const greenGradient = document.createElement('canvas').getContext('2d');
  const gradient = greenGradient.createLinearGradient(0, 0, 0, 200);
  gradient.addColorStop(0, '#1af58a');
  gradient.addColorStop(1, 'green');

  const grayGradient = document.createElement('canvas').getContext('2d');
  const gradient2 = grayGradient.createLinearGradient(0, 0, 0, 200);
  gradient2.addColorStop(0, '#545456');
  gradient2.addColorStop(1, '#bfbfbf'); 

  const greenGradient2 = document.createElement('canvas').getContext('2d');
  const gradient3 = greenGradient2.createLinearGradient(0, 0, 0, 300);
  gradient3.addColorStop(1, '#ffffff');
  gradient3.addColorStop(0, '#C1FFC1'); 

  const blueGradient = document.createElement('canvas').getContext('2d');
  const gradient4 = blueGradient.createLinearGradient(0, 0, 0, 300);
  gradient4.addColorStop(1, '#007AFF');
  gradient4.addColorStop(0, '#00CCFF');

  function TransparentizedLineChart({ data }) {
    return (
      <Line
        data={{
          labels: [1,2,3,4,5,6,7,8,9,10,11,12,13],
          datasets: [{
            fill: {value: -25},
            data: data,
            borderColor: gradient,
            tension: .3,
            backgroundColor: gradient3,
            pointRadius: 0,
          }]
        }}
        options={{
          maintainAspectRatio: false,
          responsive: true,
          plugins: {
            legend: {
              display: false,
            },
            title: {
              display: true,
            }
          },
          scales: {
            x: {
              display: false
            },
            y: {
              display: false
            }
          }
        }}
      />
    );
  }

  const centerLabelPlugin2= {
    id: 'center-label2',
    beforeDraw: (chart) => {
      const width = chart.width;
      const height = chart.height;
      const ctx = chart.ctx;

      ctx.restore();
      const fontSize = 3;
      ctx.font = fontSize + 'em Poppins';
      ctx.textBaseline = 'middle';

      let text = 0;

    if(responseData && responseData.backtest) {
        let x = findWin(responseData.backtest)
        let y = findLoss(responseData.backtest)
        setWin(x)
        setLoss(y)
        text = Math.round((x/(y + x))*100)
    }
      const textX = Math.round((width - ctx.measureText(text).width) / 2)- 15;
      const textY = height / 2 + 10;
      ctx.fillStyle = 'black';
      ctx.fillText(text, textX, textY);
      ctx.fillStyle = '#545456';
      ctx.fillText('%', textX + ctx.measureText(text).width, textY);
      
      ctx.save();
    },
  };

  function getRandMsg() {
    let msgs = ["Cooking up some juicy returns...", "Making cents of your data...", "Fetching the bull market...", "Acquiring financial wisdom...", "Investing some time to load your data...", "Raising financial IQ...", "Loading your financial future...", "Financial success loading...", "Building your portfolio...", "Getting our stocks in a row..."];
    return msgs[Math.floor(Math.random() * msgs.length)]
  }

  return (
    isLoading ? (
      <div>
      <YourComponent/>
      <h1 className='Load'>{getRandMsg()}</h1>
      </div>
    ) : (
      <div className="App">
      <div className="header" onClick={handleBack}><img src= {logo}/></div>
      <div className='i1'>
      <h1>Trading Dashboard</h1>
      <div className='info'><span>LSTM Machine learning Simple Moving Average | BTCUSD | Low-Risk</span></div>
      </div>
      <div className='i2'>

      <p>Here's an overview of the optimal algorithm</p>

      </div>
      
      <div className="boxes">
        <div className="b1">
        <div className="p1">
          <h1 className="txt">Compounding Annual Return</h1>
          <div className="donut" >
            <Doughnut
              data = {{
                labels: [],
                datasets: [
                  {
                    data: [100*CARData, 100 - (CARData*100)],
                    backgroundColor: [gradient, gradient2],
                    hoverOffset: 5,
                    cutout: 70,
                    borderRadius: 50,
                    offset: 10,
                  },
                ],
              }}
              plugins={[centerLabelPlugin]}
            />
          </div>
          <p>Projected profit of <span style={{ color: 'green' }}>${responseData?.backtest ? CARData*100000 : 'Data not available'}</span> over a year</p>
          </div>

        </div>
          <div className="p2">
            <div className='p2p1'>
          <h1 className="txt2">Win Percentage</h1>
          <div className="donut2" >
            <Doughnut
              data = {{
                labels: [],
                datasets: [
                  {
                    data: [Winn, Losss],
                    backgroundColor: [gradient, gradient2],
                    hoverOffset: 5,
                    cutout: 70,
                    borderRadius: 50,
                    offset: 10,
                  },
                ],
              }}
              plugins={[centerLabelPlugin2]}
            />
          </div>
          </div>

              <div className='p2p2'>
                <p>Winning Trades</p>
                <h1 className='trades'>{Winn} <span class="material-symbols-outlined" style={{ color: 'green' }}>trending_up</span></h1>
                <br/>
                <p>Losing Trades</p>
                <h1 className='trades'>{Losss} <span class="material-symbols-outlined" style={{ color: 'red' }}>trending_down</span></h1>
              </div>
              

          </div>


        <div className="b2">
              
          
          <div className='info-splitter'>
          <p>Probalistic Sharpe Ratio</p>
          <ImageWithInfoBox
            infoText="Confidence of the sharpe ratio's accuracy (Higher = more confident)"
            />
          </div>
          <h1>{PSR[PSR.length - 1]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: 'green' }}>trending_up</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={PSR.splice(0,13)} />
          </div>

        </div>
        <div className="b3"></div>
      </div>
      <div className="boxes2">

  


        
        <div className='chart'>
          <h1>Price of Portfolio</h1>
      <Line
  data={{
    labels: labels,
    datasets: [{
      label: "Crypto Portfolio",
    data: data,
    borderColor: gradient,
    pointRadius: 0,
    },
    {
      borderColor: gradient4,
      label: "SPY Benchmark",
      pointRadius: 0,
      data: data2,
    }
  ]
  }}
  options={{
    maintainAspectRatio: false,
    responsive: true,
    spanGaps: true,
    plugins: {
      legend: {
        labels: {
          font: {
            family: 'Poppins',
          },
          color: 'black'
        }
      },
    },
    scales: {
      x: {
        display:false
      },
      y: {
        grid: {
          drawOnChartArea: false,
        },
        ticks: {
          font: {
            family: 'Poppins', 
            size: 12 
          },
          color: 'black'
        }
      }
    }
  }}
/>
</div>


      </div>
      <div className="boxes3">


        {/* Sharpe Ratio */}


        <div className='b4'>
          
          
        <div className='info-splitter2'>
          <p>Sharpe Ratio</p>
          <ImageWithInfoBox2
              infoText2="The measure of profit vs volatility (Higher = more profit you gain for every point of volatility taken)"
            />
          </div>
          <h1>{Sharpe[Sharpe.length - 2]*100}%<span class="material-symbols-outlined" style={{ fontSize: '45px', color: 'green' }}>trending_up</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Sharpe.splice(0,13)} />
          </div>
          </div>


        {/* Alpha */}


          <div className='b5'>
          
          
          <div className='info-splitter3'>
          <p>Alpha</p>
          <ImageWithInfoBox3
              infoText3="Return on investment after adjusting for market volatility"
              />
          </div>
          <h1>{Alpha[Alpha.length - 1]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: 'green' }}>trending_up</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Alpha.splice(0,13)} />
          </div>
          </div>



          {/* Beta */}




          <div className='b6'>
          
          
          <div className='info-splitter4'>
          <p>Beta</p>
          <ImageWithInfoBox4
              infoText4="Volatility relative to a benchmark (Ex. S&P 500)"
            />
          </div>
          <h1>{Beta[Beta.length - 1]}<span class="material-symbols-outlined" style={{ fontSize: '45px', color: 'green' }}>trending_up</span></h1>
          <div className='c1'>
          <TransparentizedLineChart data={Beta.splice(0,13)} />
          </div>
          </div>
  </div>
    </div>

    


    )
  );
}





function App() {
  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');
  const [selectedCrypto, setSelectedCrypto] = useState('');

  return (
    <Router>
      <Routes>
        <Route path="/crypto" element={<CryptoPage setSelectedCrypto={setSelectedCrypto} />} />
        <Route path="/stats" element={<StatisticsPage selectedAlgorithm={selectedAlgorithm} selectedCrypto={selectedCrypto} />} />
        <Route path="/" element={<AlgorithmPage setSelectedAlgorithm={setSelectedAlgorithm} />} />
      </Routes>
    </Router>
  );
}

export default App;
